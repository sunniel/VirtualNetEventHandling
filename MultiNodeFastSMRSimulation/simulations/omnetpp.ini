[Config FastSMR]
network = ned.FastSMRModel
# network parameters
FastSMRModel.clientSize = 1
FastSMRModel.LCSize = 2

# global observer
#**.globalObserver.globalParameters.printStateToStdOut = false
## maximum distance be half of the Earth circumference 
**.globalParameters.max_distance = 20000000m

# network configurator
**.underlayConfigurator.lcType = "ned.LogicComputer"
**.underlayConfigurator.lcName = "logicComputer"
**.underlayConfigurator.nodeType = "node.Node"
**.underlayConfigurator.nodeName = "node"

# system-level parameters
#**.delay = 50ms + truncnormal(50ms, ${stddev = 50, 100, 150, 200, 250}ms)
#**.dropRate = 0.0
#**.maxDelay = 500ms

# client parameters
# for module separation in debug
# initial join timeout must be later than host initialization
**.client[*].ctrl.initJoinTime = 3000ms
**.client[*].ctrl.quorumSize = 2
**.client[*].ctrl.eventTimeout = 5000ms
**.client[*].ctrl.connectCycle = 500ms

# logical computer parameters
**.logicComputer[*].groupSize = 5
**.logicComputer[*].groupSizeThreshold = 3
**.logicComputer[*].groupSizeStart = 0

# host parameter
# to minimize the opsportunity of group failure, mean and stdvar should be configured to large values
#**.node[*].lifespan = 20ms+truncnormal(5ms, 2ms)
#**.node[*].lifespan = 200ms+truncnormal(50s, 200s)
#**.node[*].lifespan = 200000000s+truncnormal(500s, 200s)
**.node[*].IPInterface = "IPAddress"
**.node[*].HBcycle = 1000ms

# host control parameters
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
# cycle to apply events from Qd and broadcast updates to clients
#**.node[*].applyCycle = 50ms
# cycle to collect round events 
#**.node[*].roundCycle = 300ms
#**.node[*].ctrl.roundCycle = ${200,250,300,300,300!stddev}ms
**.node[*].ctrl.roundCycle = 200ms
#**.node[*].roundCycle = 500ms
# time to start event collection cycle
**.node[*].ctrl.cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.node[*].tstart = 1500ms
# group name
**.node[*].ctrl.groupName = "Group One"
# garbage collection gossip cycle
**.node[*].ctrl.GCCycle = 10000ms

# host application parameters
**.node[*].app.xorigin = 400
**.node[*].app.yorigin = 400

# Rendezvous parameters
**.rendezvous.ctrl.cycle = 1000ms

# clock configurations
**.clock.err_mean = 74ms
**.clock.err_std = 175ms

# UDP packet transmission configuration
## packet loss rate
**.pktLossRate = 0.01
## 2/3 of the light speed
**.Copt = 200000000mps
## 10 mega bits per second
**.BW = 1.04858e6bps
## Ethernet packet size 1518 Bytpes = 12144 bits
**.MTU = 12144b
**.jitter_mu = 1
**.jitter_sigma = 0.5

# churn generator configuration
**.churnGeneratorModule = "churnGenerator"
# fraction of stable nodes, from cloud or datacenter servers
**.churnGenerator.stable_fraction = 0.2
# stable node lifetime is modelled by an exponential distribution, mean = 2.5 hours
**.churnGenerator.stable_mean = 9000000ms
## for WeibullChurnGenerator, unit of minutes
**.churnGenerator.sessionLenShape = 0.38
**.churnGenerator.sessionLenScale = 42.4
**.churnGenerator.sessionLenMin = 10min

# Time-sync related parameter
#**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false


[General]
scheduler-class = "cSequentialScheduler"
# if need real-time telnet support, use SimpleSocketRTScheduler
#scheduler-class = "SimpleSocketRTScheduler"
# microsecond
simtime-scale = -6
# Minimal time unit of simulation duration can only be second
sim-time-limit = 500s
warmup-period = 0s
num-rngs = 1
rng-class = cMersenneTwister
seed-0-mt = 3
repeat = 1
debug-on-errors = false
cmdenv-module-messages = true
cmdenv-event-banners = true
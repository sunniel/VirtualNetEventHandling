[Config FastSMR_Simple_Discard]
network = fastSMR.FastSMRModel
# network parameters
FastSMRModel.groupSize = 5
FastSMRModel.groupSizeThreshold = 3
FastSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 998000000000000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = 0.0
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
#**.client[*].*.channel.delay = 50ms + truncnormal(0ms, ${0,50,100,150,200,250,300,350}ms)
**.client[*].*.channel.delay = 50ms + truncnormal(0ms, 50ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.client[*].*.channel.delay = 50ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, 50ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
# for module separation in debug
**.client[*].startup = 1000ms
# initial join timetou must be later than host initialization
**.client[*].initJoinTime = 3000ms
**.client[*].quorumSize = 1
**.client[*].eventTimeout = 5000ms
**.client[*].offset = normal(0ms, ${0,25,50,75,100,205,305,400,500}ms)

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 200000000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
# cycle to apply events from Qd and broadcast updates to clients
**.host[*].applyCycle = 50ms
# cycle to collect round events 
#**.host[*].roundCycle = 300ms
**.host[*].roundCycle = 200ms
# time to start event collection cycle
**.host[*].cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.host[*].tstart = 1500ms 


# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms

# Time-sync related parameter
#**.offset = 20ms + normal(0ms, 20ms)
**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false

###########################################################

[General]
# microsecond
simtime-scale = -6
# Minimal time unit of simulation duration can only be second
sim-time-limit = 500s
warmup-period = 0s
num-rngs = 1
rng-class = cMersenneTwister
seed-0-mt = 3
repeat = 1
debug-on-errors = false

# default properties
#**.channel.maxDelay = 450ms
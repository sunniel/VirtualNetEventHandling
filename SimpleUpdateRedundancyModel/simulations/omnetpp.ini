[Config SimpleURM]
network = unreliable.UnreliableUpdateRedundancyModel
# network parameters
UnreliableUpdateRedundancyModel.groupSize = 5
UnreliableUpdateRedundancyModel.groupSizeThreshold = 3
UnreliableUpdateRedundancyModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 100ms
# for module separation in debug
**.purger.startup = 800ms

# channel parameters
**.channel.delay = 50ms + truncnormal(50ms, ${50, 100, 150, 200, 250}ms)
#**.channel.delay = 50ms
# set dropt rate = 0 for test purpose
**.channel.dropRate = 0.0
#**.channel.dropRate = 0.0

# client parameters
**.client[*].eventCycle = 500ms + exponential(1000ms)
**.client[*].eventTimeout = 5000ms
# for module separation in debug
**.client[*].startup = 1100ms

# host parameter
**.host[*].lifespan = 2000s+truncnormal(30s, 10s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].startup = 0ms

# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms

# result recording
**.client[*].interactDelay.result-recording-modes = -vector

###########################################################

[Config BasicSMR]
network = basicSMR.BasicSMRModel
# network parameters
BasicSMRModel.groupSize = 5
BasicSMRModel.groupSizeThreshold = 3
BasicSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 9980000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = 0.0
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, ${stddev0 = 50, 100, 150, 200, 250}ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, ${stddev1 = 50, 100, 150, 200, 250!stddev0}ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
**.client[*].eventCycle = 500ms + exponential(1000ms)
**.client[*].eventTimeout = 5000ms
# for module separation in debug
**.client[*].startup = 1000ms
**.client[*].hostType = "BasicSMRNode"

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 20000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
**.host[*].eh_cycle = 200ms
**.host[*].apply_cycle = 50ms

# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms
#**.rendezvous.heartbeatInit = 10ms
**.rendezvous.hostType = "basicSMR.BasicSMRNode"

# result recording
**.client[*].interactDelay.result-recording-modes = -vector

###########################################################

[Config BasicNuSMR]
network = basicSMR.BasicSMRModel
# network parameters
BasicSMRModel.groupSize = 5
BasicSMRModel.groupSizeThreshold = 3
BasicSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 9980000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = 0.0
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, ${stddev0 = 50, 100, 150, 200, 250}ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, ${stddev1 = 50, 100, 150, 200, 250!stddev0}ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
**.client[*].eventCycle = 500ms + exponential(1000ms)
# for module separation in debug
**.client[*].startup = 1000ms
**.client[*].hostType = "BasicNuSMRNode"
**.client[*].eventTimeout = 5000ms

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 20000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
**.host[*].eh_cycle = 200ms
# convert events to states 
**.host[*].apply_cycle = 100ms

# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms
#**.rendezvous.heartbeatInit = 10ms
**.rendezvous.hostType = "basicSMR.BasicNuSMRNode"

# result recording
**.client[*].interactDelay.result-recording-modes = -vector

###########################################################

[Config FastSMR]
network = fastSMR.FastSMRModel
# network parameters
FastSMRModel.groupSize = 5
FastSMRModel.groupSizeThreshold = 3
FastSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 998000000000000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = 0.0
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, ${stddev2 = 50, 100, 150, 200, 250}ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.client[*].*.channel.delay = 50ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, ${stddev3 = 50, 100, 150, 200, 250!stddev2}ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
# for module separation in debug
**.client[*].startup = 1000ms
# initial join timetou must be later than host initialization
**.client[*].initJoinTime = 3000ms
**.client[*].quorumSize = 2
**.client[*].eventTimeout = 5000ms

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 200000000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
# cycle to apply events from Qd and broadcast updates to clients
**.host[*].applyCycle = 50ms
# cycle to collect round events 
#**.host[*].roundCycle = 300ms
**.host[*].roundCycle = ${200,250,300,300,300!stddev2}ms
# time to start event collection cycle
**.host[*].cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.host[*].tstart = 1500ms 


# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms

# Time-sync related parameter
**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false

###########################################################

[Config FastSMRSingleQuorum]
network = fastSMR.FastSMRModel
# network parameters
FastSMRModel.groupSize = 5
FastSMRModel.groupSizeThreshold = 3
FastSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 998000000000000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = 0.0
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, ${stddev2 = 50, 100, 150, 200, 250}ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.client[*].*.channel.delay = 50ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, ${stddev3 = 50, 100, 150, 200, 250!stddev2}ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
# for module separation in debug
**.client[*].startup = 1000ms
# initial join timetou must be later than host initialization
**.client[*].initJoinTime = 3000ms
**.client[*].quorumSize = 1
**.client[*].eventTimeout = 5000ms

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 200000000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
# cycle to apply events from Qd and broadcast updates to clients
**.host[*].applyCycle = 50ms
# cycle to collect round events 
#**.host[*].roundCycle = 300ms
**.host[*].roundCycle = ${200,250,300,300,300!stddev2}ms
# time to start event collection cycle
**.host[*].cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.host[*].tstart = 1500ms 


# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms

# Time-sync related parameter
**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false

###########################################################

[Config FastSMRThreeQuorum]
network = fastSMR.FastSMRModel
# network parameters
FastSMRModel.groupSize = 5
FastSMRModel.groupSizeThreshold = 3
FastSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 998000000000000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = 0.0
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, ${stddev2 = 50, 100, 150, 200, 250}ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.client[*].*.channel.delay = 50ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, ${stddev3 = 50, 100, 150, 200, 250!stddev2}ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
# for module separation in debug
**.client[*].startup = 1000ms
# initial join timetou must be later than host initialization
**.client[*].initJoinTime = 3000ms
**.client[*].quorumSize = 3
**.client[*].eventTimeout = 5000ms

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 200000000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
# cycle to apply events from Qd and broadcast updates to clients
**.host[*].applyCycle = 50ms
# cycle to collect round events 
#**.host[*].roundCycle = 300ms
**.host[*].roundCycle = ${200,250,300,300,300!stddev2}ms
# time to start event collection cycle
**.host[*].cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.host[*].tstart = 1500ms 


# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms

# Time-sync related parameter
**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false

###########################################################

[Config FastSMRFiveQuorum]
network = fastSMR.FastSMRModel
# network parameters
FastSMRModel.groupSize = 5
FastSMRModel.groupSizeThreshold = 3
FastSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 998000000000000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = 0.0
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, ${stddev2 = 50, 100, 150, 200, 250}ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.client[*].*.channel.delay = 50ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, ${stddev3 = 50, 100, 150, 200, 250!stddev2}ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
# for module separation in debug
**.client[*].startup = 1000ms
# initial join timetou must be later than host initialization
**.client[*].initJoinTime = 3000ms
**.client[*].quorumSize = 5
**.client[*].eventTimeout = 5000ms

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 200000000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
# cycle to apply events from Qd and broadcast updates to clients
**.host[*].applyCycle = 50ms
# cycle to collect round events 
#**.host[*].roundCycle = 300ms
**.host[*].roundCycle = ${200,250,300,300,300!stddev2}ms
# time to start event collection cycle
**.host[*].cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.host[*].tstart = 1500ms 


# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms

# Time-sync related parameter
**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false

###########################################################

[Config SimpleURMDeliveryRate]
network = unreliable.UnreliableUpdateRedundancyModel
# network parameters
UnreliableUpdateRedundancyModel.groupSize = 5
UnreliableUpdateRedundancyModel.groupSizeThreshold = 3
UnreliableUpdateRedundancyModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 100ms
# for module separation in debug
**.purger.startup = 800ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = ${0.3, 0.5, 0.7}
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, 50ms)
**.channel.delay = 50ms + truncnormal(50ms, 50ms)
#**.channel.delay = 50ms
# set dropt rate = 0 for test purpose
**.channel.dropRate = 0.0
#**.channel.dropRate = 0.0

# client parameters
**.client[*].eventCycle = 100ms + exponential(200ms)
**.client[*].eventTimeout = 5s
# for module separation in debug
**.client[*].startup = 1100ms

# host parameter
**.host[*].lifespan = 2000s+truncnormal(30s, 10s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].startup = 0ms

# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms

# result recording
**.client[*].interactDelay.result-recording-modes = -vector

###########################################################

[Config BasicSMRDeliveryRate]
network = basicSMR.BasicSMRModel
# network parameters
BasicSMRModel.groupSize = 5
BasicSMRModel.groupSizeThreshold = 3
BasicSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 9980000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = ${0.3, 0.5, 0.7}
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, 50ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, 50ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
**.client[*].eventCycle = 500ms + exponential(1000ms)
**.client[*].eventTimeout = 5000ms
# for module separation in debug
**.client[*].startup = 1000ms
**.client[*].hostType = "BasicSMRNode"

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 20000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
**.host[*].eh_cycle = 200ms
**.host[*].apply_cycle = 50ms

# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms
#**.rendezvous.heartbeatInit = 10ms
**.rendezvous.hostType = "basicSMR.BasicSMRNode"

# result recording
**.client[*].interactDelay.result-recording-modes = -vector

###########################################################

[Config FastSMRDeliveryRate]
network = fastSMR.FastSMRModel
# network parameters
FastSMRModel.groupSize = 5
FastSMRModel.groupSizeThreshold = 3
FastSMRModel.groupSizeStart = 0

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 998000000000000ms

# channel parameters
# unreliable channel for clients
**.client[*].*.channel.dropRate = ${0.3, 0.5, 0.7}
#**.client[*].*.channel.delay = 50ms + exponential(50ms)
**.client[*].*.channel.delay = 50ms + truncnormal(50ms, 50ms)
# for test purpose only
**.rendezvous.*.channel.delay = 10ms
#**.client[*].*.channel.delay = 50ms
#**.channel.delay = 50ms + exponential(50ms)
**.channel.delay = 50ms + truncnormal(50ms, 50ms)
#**.channel.delay = 50ms
# simulate a reliable channel
**.channel.dropRate = 0.0

# client parameters
# for module separation in debug
**.client[*].startup = 1000ms
# initial join timetou must be later than host initialization
**.client[*].initJoinTime = 3000ms
**.client[*].quorumSize = 2
**.client[*].eventTimeout = 5000ms

# host parameter
# to minimize the opportunity of group failure, mean and stdvar should be configured to large values
#**.host[*].lifespan = 200ms+truncnormal(50s, 200s)
**.host[*].lifespan = 200000000s+truncnormal(500s, 200s)
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.host[*].purgerInit = 0ms
**.host[*].startup = 1ms
# cycle to apply events from Qd and broadcast updates to clients
**.host[*].applyCycle = 50ms
# cycle to collect round events 
#**.host[*].roundCycle = 300ms
**.host[*].roundCycle = 200ms
# time to start event collection cycle
**.host[*].cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.host[*].tstart = 1500ms 


# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms

# Time-sync related parameter
**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false

###########################################################

[General]
# microsecond
simtime-scale = -6
# Minimal time unit of simulation duration can only be second
sim-time-limit = 500s
warmup-period = 0s
num-rngs = 1
rng-class = cMersenneTwister
seed-0-mt = 3
repeat = 1
debug-on-errors = false

# default properties
**.channel.maxDelay = 450ms
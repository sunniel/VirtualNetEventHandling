//
// Generated file, do not edit! Created by opp_msgc 4.2 from fastSMR/messages/FSMRFinal.msg.
//

#ifndef _FSMRFINAL_M_H_
#define _FSMRFINAL_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "Constants.h"
// }}



/**
 * Class generated from <tt>fastSMR/messages/FSMRFinal.msg</tt> by opp_msgc.
 * <pre>
 * packet FSMRFinal {
 *     string displayString = DISPLAY_STR_MSG_GROUP_EH;
 *     
 *     string senderName;
 *     int epoch;
 *     int groupId;
 *     int round;
 * }
 * </pre>
 */
class FSMRFinal : public ::cPacket
{
  protected:
    opp_string displayString_var;
    opp_string senderName_var;
    int epoch_var;
    int groupId_var;
    int round_var;

  private:
    void copy(const FSMRFinal& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FSMRFinal&);

  public:
    FSMRFinal(const char *name=NULL, int kind=0);
    FSMRFinal(const FSMRFinal& other);
    virtual ~FSMRFinal();
    FSMRFinal& operator=(const FSMRFinal& other);
    virtual FSMRFinal *dup() const {return new FSMRFinal(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getDisplayString() const;
    virtual void setDisplayString(const char * displayString);
    virtual const char * getSenderName() const;
    virtual void setSenderName(const char * senderName);
    virtual int getEpoch() const;
    virtual void setEpoch(int epoch);
    virtual int getGroupId() const;
    virtual void setGroupId(int groupId);
    virtual int getRound() const;
    virtual void setRound(int round);
};

inline void doPacking(cCommBuffer *b, FSMRFinal& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, FSMRFinal& obj) {obj.parsimUnpack(b);}


#endif // _FSMRFINAL_M_H_

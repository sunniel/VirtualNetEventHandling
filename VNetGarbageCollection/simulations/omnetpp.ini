[Config FastSMR]
network = ned.FastSMRModel
# network parameters
FastSMRModel.clientSize = 10

# system-level parameters
**.delay = 50ms + truncnormal(50ms, 50ms)
**.dropRate = 0.0
**.maxDelay = 500ms

# purger parameter
**.purger.purgeCycle = 166ms
# for module separation in debug
**.purger.startup = 998000000000000ms

# client parameters
# for module separation in debug
**.client[*].startup = 1000ms
# initial join timeout must be later than host initialization
**.client[*].initJoinTime = 3000ms
**.client[*].quorumSize = 2
**.client[*].eventTimeout = 5000ms
**.client[*].connectCycle = 500ms

# logical computer parameters
**.logicComputer[*].groupSize = 5
**.logicComputer[*].groupSizeThreshold = 3
**.logicComputer[*].groupSizeStart = 0

# host parameter
# to minimize the opsportunity of group failure, mean and stdvar should be configured to large values
#**.node[*].lifespan = 200ms+truncnormal(50s, 200s)
**.node[*].lifespan = 200000000s+truncnormal(500s, 200s)
**.node[*].startup = 1ms

# host control parameters
# new host setup time
#**.setupTime = 5s + truncnormal(30s, 70s)
# for module separation in debug
**.node[*].ctrl.purgerInit = 0ms
# cycle to apply events from Qd and broadcast updates to clients
#**.node[*].applyCycle = 50ms
# cycle to collect round events 
#**.node[*].roundCycle = 300ms
**.node[*].ctrl.roundCycle = 200ms
#**.node[*].roundCycle = 500ms
# time to start event collection cycle
**.node[*].ctrl.cycleStart = 4000ms
# the time sent to client for start event broadcast 
#**.node[*].tstart = 1500ms
# group name
**.node[*].ctrl.groupName = "Group One"
# garbage collection gossip cycle
# for cycle increase test
#**.node[*].ctrl.GCCycle = ${1000,2000,3000,4000,5000,6000,7000,8000,9000,10000}ms
# for comparison without GC
**.node[*].ctrl.GCCycle = 5000ms
#**.node[*].ctrl.GCCycle = 1000ms

# host application parameters
**.node[*].app.xorigin = 400
**.node[*].app.yorigin = 400

# Rendezvous parameters
**.rendezvous.cycle = 1000ms
# for module separation in debug
**.rendezvous.startup = 0ms
**.rendezvous.groupInit = 500ms
**.rendezvous.hostType = "ned.Node"
**.rendezvous.hostName = "node"

# Time-sync related parameter
**.offset = 20ms + normal(0ms, 20ms)

# result recording
**.client[*].interactDelay.result-recording-modes = -vector
record-eventlog = false


[General]
scheduler-class = "cSequentialScheduler"
# if need real-time telnet support, use cSocketRTScheduler
#scheduler-class = "cSocketRTScheduler"
# microsecond
simtime-scale = -6
# Minimal time unit of simulation duration can only be second
sim-time-limit = 1000s
warmup-period = 0s
num-rngs = 1
rng-class = cMersenneTwister
seed-0-mt = 3
repeat = 1
debug-on-errors = false
cmdenv-module-messages = true
cmdenv-event-banners = true